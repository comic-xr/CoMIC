import os
import numpy as np
import subprocess

# Define Scene-related divisor for C_store_0and1, each scene is also a separate directory
directory_divisors = {
    'bicycle': 434781,
    'bonsai': 135485,
    'garden': 472844,
    'kitchen': 452878,
    'train': 424491,
    # Add your own scene and divisor here to use ...
}

def generate_lp_file(directory, cd_new, c_store_0and1, matrix_a, divisor):
    # Create current LP file in the same directory/scene
    lp_filename = os.path.join(directory, f"{os.path.basename(directory)}.lp")
    
    y = cd_new.shape[0]  # The length of the vector
    
    with open(lp_filename, 'w') as lp_file:
        # Objective function
        lp_file.write("Minimize\n obj: ")
        terms = []
        for i in range(y):
            term_1 = f"{cd_new[i, 0]} x_{i}"
            term_2 = f"{c_store_0and1[i, 0] / divisor} x_{i}"
            terms.append(f"{term_1} + {term_2}")
        
        # Join all terms into a single objective function
        lp_file.write(" + ".join(terms) + "\n")
        
        # Constraints
        lp_file.write("\nSubject To\n")
        n = matrix_a.shape[0]
        for j in range(n):
            constraint_terms = []
            for i in range(y):
                constraint_terms.append(f"{matrix_a[j, i]} x_{i}")
            # Each row's sum should equal 1
            lp_file.write(f" c{j}: " + " + ".join(constraint_terms) + " = 1\n")
        
        lp_file.write("\nBinary\n")
        for i in range(y):
            lp_file.write(f" x_{i}\n")
        
        lp_file.write("\nEnd\n")
    
    return lp_filename

def run_gurobi(lp_file, directory):
    # Run gurobi_cl to solve the LP file and generate the solution file
    solution_file = os.path.join(directory, "solution.sol")
    subprocess.run(["gurobi_cl", f"ResultFile={solution_file}", lp_file], check=True)
    return solution_file

def parse_solution(solution_file, y):
    # Initialize an empty list to store x values
    x_values = []

    # Open the solution file generated by gurobi_cl
    with open(solution_file, 'r') as f:
        for line in f:
            # Look for lines starting with 'x_' (the variable names)
            if line.startswith('x_'):
                # Extract the variable index and its value
                parts = line.split()
                value = float(parts[1])
                x_values.append(value)

    # Convert the list of x values to a numpy array with shape (y, 1) for future use
    x_array = np.array(x_values).reshape(-1, 1)
    return x_array

def process_directory(directory, divisor):
    # Load the pre-generated .npy files in the directory
    cd_new = np.load(os.path.join(directory, 'Cd_new.npy'))
    c_store_0and1 = np.load(os.path.join(directory, 'C_store_0and1.npy'))
    matrix_a = np.load(os.path.join(directory, 'matrix_A.npy'))

    lp_file = generate_lp_file(directory, cd_new, c_store_0and1, matrix_a, divisor)

    solution_file = run_gurobi(lp_file, directory)

    # Parse the solution file to extract the values of x
    x_solution = parse_solution(solution_file, cd_new.shape[0])

    np.save(os.path.join(directory, 'x_solution.npy'), x_solution)
    print(f"Solution saved to {os.path.join(directory, 'x_solution.npy')}")

def process_all_directories(root_directory):
    # Iterate over the specific scene directories defined in the directory_divisors
    for directory_name, divisor in directory_divisors.items():
        dir_path = os.path.join(root_directory, directory_name)
        if os.path.isdir(dir_path):
            print(f"Processing directory: {dir_path} with divisor {divisor}")
            process_directory(dir_path, divisor)

# Run the entire flow within your own root path (where your scenes subdirectories are located)
root_directory = '/Users/venu/projects/SGSS/scenes/bonsai/bonsai_ilp_7000/'
process_all_directories(root_directory)

